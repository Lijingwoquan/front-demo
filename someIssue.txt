- 在拖动目标上触发事件 (源元素):

  > ondragstart - 用户开始拖动元素时触发\

- 释放目标时触发的事件:

  > ondragenter - 当被鼠标拖动的对象进入其容器范围内时触发此事件\
  > ondragover - 当某被拖动的对象在另一对象容器范围内拖动时触发此事件（可用用来清除浏览器默认行为，保证 ondrop 事件正常触发）\
  > ondragleave - 当被鼠标拖动的对象离开其容器范围内时触发此事件 \
  > ondrop - 在一个拖动过程中，释放鼠标键时触发此事件

- dataTransfer 对象的 clearData 方法仅在 dragstart 事件中有效



# 遇到的问题

1. `display` 为 `block-inline` 的盒子直接有默认空白 要设置 `font-size`为 `0` 来解决
2. `dispaly` 为 `block-inline` 的盒子的对齐基准线为 `baseline`,如果不修改 `vertical-align` ,会导致 hover 之后头部标签移动到底部,
   > 这一情况可以通过 `flot` 来解决



1.css选择器
css选择器只能选择后面的元素 无法选中前面的元素

2.限制使用伪类的元素
img input这些无内容的元素 无法使用before after伪类

3.事件传播和事件冒泡
可以使用事件对象的stopPropagation()方法来阻止冒泡，
使用stopImmediatePropagation()方法来阻止进一步的事件处理。

4.父级塌陷
脱离文本流的定位均无法撑开父元素 如 float absolute

5.更好的图片展示
当要展示图片时使用background-image往往比使用img更好操作 可以避免宽高丢失的情况(如想使用position为absolute的img撑开父元素)

6.canvas运动建议
对画布上元素操作时 对象里面写速度是一种很优雅的方式

7.优化动画
window.requestAnimationFrame() 方法会告诉浏览器你希望执行一个动画。 它能让浏览器在执行动画时更加流畅，同时避免不必要的重绘 一般是60帧
它要求浏览器在下一次重绘之前，调用用户提供的回调函数。

8.canvas画图path
beginPath() 开启新路径，closePath() 关闭路径（可选），fill() 和 stroke() 用于渲染路径。
每次绘制复杂图形时，应该在每个独立图形之前调用 beginPath()，使图形保持独立路径，避免将多个图形合并为同一条复杂路径，导致性能问题。

9.关于键盘监听事件
event.which表示点击的按键的编码。这个编码是该按键的unicode编码
需要注意的是，按下键盘上的A时，event.which值是a的编码，只有同时按下shift和A，event.which的值才是A的编码。同理event.key的值也是(即大写输出要按下shift)

10.appearance
给input设置appearance可以消除其默认样式,再将其样式需要点击的部位,这样我们就不用使用label来控制其checked了

11.background的裁剪问题
对于文字裁剪 我们使用background-clip其实只是让background在有文字的部分显示出来 并不能改变其渐变范围
要想让其从文字头部开始我们可以设置其display: inline-block 
保证 .gradient-text 元素只占用文字的宽度，而不是整个行宽 这样我们设置文字渐变就可以从文字开头开始了

12.inline-block导致的幽灵节点的问题
在CSS中，leading（line-height - font-size）被平均分成了两半， 
分别加到文本行上方和下方

img为inline-block 存在幽灵节点
其效果和再其后加一个字母x类似 又因为vertical-aligin默认为基线对齐
所以底部会有一块空隙
解决方法
    1.设置 vertical-aligin:bttom

    2.将图片display设置为block 这样就没有幽灵节点了 再移除我们加入的字,就无间隙产生了

    3.设置行高 将父元素的行高设置为 0
推荐使用方法一 使用方法三会容易导致混乱